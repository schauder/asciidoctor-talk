= Dokumentation & Slides mit AsciiDoc: und Git, Gradle und Reveal.js
:icons: font
:twitter-tag: @jensschauder
:conference-tag: #JavaLand
:talk-tag: #ascii-reveal

include::footer.ad[]

include::self.ad[]

== Once upon a time ...

== !

image::powerpoint-versions.png[background, size=cover]

=== Oder im "architecture" Ordner

[NOTE.speaker]
====
* backup
* old
* archive
* archive 2016
* Architectur Documentation final
* Architecture Documentation final
* Architecture Documentation final comments.
====

=== Wer hat das Problem mit seinem Java Source Code?

[NOTE.speaker]
====
Why not?

We use version control!
====

== Versionsverwaltung!

image::clear-lightbulb.jpeg[background, size=cover]

[NOTE.speaker]
====
Today that probably means git or if you are a hipster hg

commits, merge, rebase, cherry-pick for moving changes between versions.
====

== Und was ist mit [line-through]#Tee# Diff?

image::tee.jpg[background, size=cover]

=== Ein Leben ohne [line-through]#Mops# Diffs ist möglich, aber sinnlos.

image::mops.jpg[background, size=cover]

== Textbasiert!

image::clear-lightbulb.jpeg[background, size=cover]

=== Plain Ascii

Ein bisschen zu **plain**

=== Markdown

Bekannt von Stackoverflow

Ziemlich plain

Nur einfache Formattierung

=== DocBook

Entworfen für technische Dokumentation

Aber **XML!**

== AsciiDoc

=== Einfach zu schreiben.

=== Zielformate

HTML5, EPUB3, PDF, DocBook 5 und mehr

z.B. reveal.js

=== Sie baden gerade ihre Hände drin

image::palmolive.jpg[background, size=cover]

=== Tools

DocGist: Onlineeditor

Github Pages

RestDoc: REST Api Doku aus Tests

Plugins für diverse Editoren

[NOTE.speaker]
====
DocGis: editiert Gists, Dropbox Content und dergleichen

Plugins: Atom, IntelliJ und Visual Studio Code
====

=== Code Beispiele

....
= Dokument Titel

== Kapitel

=== Unterkapitel

**bold**

*italic*

http://blog.schauderhaft.de

http://blog.schauderhaft.de[Mein Blog]

* list element
....

=== Images

....
image::palmolive.jpg[background, size=cover]
....

=== Uml Diagrams
....
[plantuml, diagram-classes, png]
----
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock

BlockProcessor <|-- DiagramBlock
DiagramBlock <|-- DitaaBlock
DiagramBlock <|-- PlantUmlBlock
----
....

=== Uml Ergebnis
image::diagram-classes.png[background, size=contain]

[plantuml, diagram-classes, png]
----
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock

BlockProcessor <|-- DiagramBlock
DiagramBlock <|-- DitaaBlock
DiagramBlock <|-- PlantUmlBlock
----

=== Die offensichtliche Frage

[quote, Imaginary Author]
Das ist ja ganz nett, für kleine Diagramme, aber was ist mit meinem 500 Klassen Architekturdiagramm?

=== Die offensichtliche Antwort

[quote, Jens Schauder]
In ein Bild konvertieren, nach Bedarf skalieren, nach `/dev/null` verschieben und von dort aus einfügen.

=== Admonitions
....
NOTE: Dies ist eine Notiz
....
NOTE: Dies ist eine Notiz

=== Includes

....
\include::somefile.ad[]
....

Fügt den Inhalt einer Datei ein.

=== Source Code

....
[source,ruby]
----
require 'sinatra'

get '/hi' do
  "Hello World!"
end
----
....

=== Source Code Result

[source,ruby]
----
require 'sinatra'

get '/hi' do
  "Hello World!"
end
----

=== Source Code via include

....
[source,groovy]
.Sample.groovy
----
\include::Sample.groovy[tags=helloMethod]
----
....

Fügt den Teil zwischen

....
// tag::helloMethod[]
....

und

....
// end::helloMethod[]
....

ein.

=== Variablen ersetzen
....
:sayMyName: Jens Schauder

{sayMyName}
....

:sayMyName: Jens Schauder

{sayMyName}

[NOTE.speaker]

Attribut!

=== Variable aus dem Buildscript

....
{conference}
....

{conference}

=== Conditional content
....
\ifdef::venue[{venue}]

\ifndef::venue[]
{conference}
\endif::venue[]
....

ifdef::venue[{venue}]

ifndef::venue[]
{conference}
endif::venue[]

[NOTE.speaker]
====
Abschnitte einfügen, wenn der Kunde das Modul gekauft hat.

Dinge nur für Releases aber nicht in Dokumentation für Nightly Builds.
====

== All together now!

=== Wir haben Asciidoc Quellen

=== Wir haben Includes

* Quellcode
* Bilder
* CSS
* Standard Content

=== Versionsverwaltet (in Git)

=== Wie bekommen wir jetzt ein ...

* PDF?
* HTML Dokument?
* Reveal.js Dokument?

== Wir brauchen ein Buildtool!

image::clear-lightbulb.jpeg[background, size=cover]

=== Gradle

=== Ich benutze Gradle, weil ..

* es ist flexibler
* weniger wortreich
* weil es einen netten Migrationspfad vom Customskript zum Plugin gibt.
* nur so.

Geht alles bestimmt auch mit Maven

=== Der Plan

1. Code compilieren und testen

2. Resourcen einsammeln (CSS, JS-Bibliotheken ...)

3. run asciidoctor to produce the outputs you want

=== Compilieren und testen

[source, java]
----
apply plugin: 'java'
----
ausführen mit

[source]
----
./gradlew test
----

=== Das war einfach

=== Asciidoctor -> HTML5

[source, groovy]
----
plugins {
  id 'org.asciidoctor.convert' version '1.5.3'}

apply plugin: 'org.asciidoctor.convert'

asciidoctorj {version = '1.5.4'}

asciidoctor {
    attributes \
        'build-gradle': file('build.gradle'),
        'sourcedir': project.sourceSets.main.java.srcDirs[0],
        'endpoint-url': 'http://example.org',
        'source-highlighter': 'coderay',
        'imagesdir': 'images',
        'toc': 'left',
        'icons': 'font',
        'setanchors': '',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': ''
}
----

=== Ausführen

[source]
----
./gradlew asciidoctor
----

Viele Attribute aber, geht noch

=== Asciidoctor -> Reveal.js

[source, groovy]
----
buildscript {
    dependencies {
        classpath 'org.ysb33r.gradle:vfs-gradle-plugin:1.0-beta8'
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.3'
  id 'com.github.jruby-gradle.base' version '1.2.1'
}

apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'org.ysb33r.vfs'
apply plugin: 'java'
apply plugin: 'org.asciidoctor.convert'

version = '1.0.0-SNAPSHOT'

ext {
    revealjsVersion = '3.2.0'
    asciidoctorBackendVersion = 'master'
    downloadDir = new File(buildDir,'download')
    templateDir = new File(downloadDir,'templates')
    revealjsDir   = new File(downloadDir,'reveal.js')
}

repositories {
    jcenter()
}

dependencies {
    gems 'rubygems:slim:3.0.6'
    gems 'rubygems:thread_safe:0.3.5'
}

task download << {
    mkdir downloadDir
    vfs {
        cp "zip:https://github.com/asciidoctor/asciidoctor-reveal.js/archive/${asciidoctorBackendVersion}.zip!asciidoctor-reveal.js-${asciidoctorBackendVersion}",
                templateDir, recursive:true, overwrite:true
        cp "zip:https://github.com/hakimel/reveal.js/archive/${revealjsVersion}.zip!reveal.js-${revealjsVersion}",
                revealjsDir, recursive:true, overwrite:true
    }
}

download {
    description "Download extra revealjs resources"
    outputs.dir templateDir
    outputs.dir revealjsDir
}

asciidoctorj {
  version = '1.5.4'
}

asciidoctor {
    dependsOn jrubyPrepare, download
    sources {
        include 'example-deck.adoc'
    }
    resources {
        from (sourceDir) {
            include 'images/**'
        }
        from (downloadDir) {
            include 'reveal.js/**'
        }
    }
    backends 'revealjs'
    attributes \
        'build-gradle': file('build.gradle'),
        'sourcedir': project.sourceSets.main.java.srcDirs[0],
        'endpoint-url': 'http://example.org',
        'source-highlighter': 'coderay',
        'imagesdir': './images',
        'toc': 'left',
        'icons': 'font',
        'setanchors': '',
        'idprefix': 'slide-',
        'idseparator': '-',
        'docinfo1': '',
        'revealjs_theme': 'black',
        'revealjs_transition': 'linear',
        'revealjs_history': 'true',
        'revealjs_slideNumber': 'true'
    options template_dirs: [new File(templateDir,'templates/slim').absolutePath]
}
----

=== "uiuiuiui Tiffy"

image::samson.jpg[background, size=cover]

=== Mein perönlicher Build (1/2)

* compilieren & testen
* ruby aufsetzen
* asciidoctor-reveal plugin runterladen
* reveal.js runterladen
* Stylesheets (SCSSS) kompilieren
* Resourcen (Bilder) kopieren


=== Mein perönlicher Build (2/2)
* asciidoctor Dateien konvertieren
* Ergebnisse publizieren.

=== Das meiste ist in jedem Vortrag gleich

=== Ein eigenes Plugin

=== Warum ist das so umständlich?

1. Viele verschiedene Technologien.

2. Javascript Ökosystem ist ziemlich unreif.

=> Keine Standardstruktur

=> Abhängigkeiten nicht standardisiert (Web-Jars???)

== Reveal.js

=== Ein Präsentationstool basierend auf JS

* Eine Präsentation ist ein HTML Dokument
* Java Script kümmert sich um Folienübergänge
* CSS um das Styling

=== Einfach zu verteilen

[NOTE.speaker]
====
Auf einen Webserver laden.

Link verteilen
====

=== Features

* Übergänge
* Formattierung
* Code Highlighting
* Speaker Notes
* Media
* Overview

=== Aber HTML

*seriously?*

=== AsciiDoc FTW!

* Fast nur noch Inhalt im Dokument

* Ein Stylesheet to rule them all.

== Tips und Tricks

=== Speaker Notes
[source]
----
[NOTE.speaker]
====
Speaker notes
====
----
=== Background Image
[source]
----
image::samson.jpg[background, size=cover]
----
[source, css]
----
section[data-background-size] h2 {
  background: rgba($color-secondary-2, 0.5);
  box-shadow: 0 0 5px rgba($color-primary-1, 0.5);
  text-shadow: none;
}
----
=== UML als Background
[source]
....
image::diagram-classes.png[background, size=contain]

[plantuml, diagram-classes, png]
----
class BlockProcessor
class WhatEver
----
....

=== Footer

....
[subs="attributes"]
++++
<script type="text/javascript">
    window.addEventListener("load", function() {

        revealDiv = document.querySelector("body div.reveal")
        footer = document.getElementById("schauderhaft-footer");
        revealDiv.appendChild(footer);

    } );
</script>
<div id="schauderhaft-footer" class="footer">
    <span class="element">{twitter-tag}</span>
    <span class="element">{conference-tag}</span>
    <span class="element">{talk-tag}</span>
</div>
++++
....

[.credits]
== Quellen

_clear-glass-light-bulb_ von https://www.pexels.com/photo/clear-glass-light-bulb-75427/

_Was ist mit Tee_ aus der Giotto Werbung

_Mops_ von existentist - Flickr, CC BY 2.0, https://commons.wikimedia.org/w/index.php?curid=2960791

_Sie baden gerade ihre Hände drin_ aus der Giotto Werbung

_Sesamstrasse_ von Fabula Filmpuppen - http://www.fabula-filmpuppen.de/Sesamstrasse054.jpg