= Dokumentation & Slides mit AsciiDoc: und Git, Gradle und Reveal.js
:icons: font

include::self.ad[]

== Once upon a time ...

== !

image::powerpoint-versions.png[background, size=cover]

=== Oder im "architecture" Ordner

[NOTE.speaker]
====
* backup
* old
* archive
* archive 2016
* Architectur Documentation final
* Architecture Documentation final
* Architecture Documentation final comments.
====

=== Wer hat das Problem mit seinem Java Source Code?

[NOTE.speaker]
====
Why not?

We use version control!
====

== Versionsverwaltung!

image::clear-lightbulb.jpeg[background, size=cover]

[NOTE.speaker]
====
Today that probably means git or if you are a hipster hg

commits, merge, rebase, cherry-pick for moving changes between versions.
====

== Und was ist mit [line-through]#Tee# Diff?

image::tee.jpg[background, size=cover]

=== Ein Leben ohne [line-through]#Mops# Diffs ist möglich, aber sinnlos.

image::mops.jpg[background, size=cover]

== Textbasiert!

image::clear-lightbulb.jpeg[background, size=cover]

=== Plain Ascii

Ein bisschen zu **plain**

=== Markdown

Bekannt von Stackoverflow

Ziemlich plain

Nur einfache Formattierung

=== DocBook

Entworfen für technische Dokumentation

Aber **XML!**

== AsciiDoc

=== Einfach zu schreiben.

=== Zielformate

HTML5, EPUB3, PDF, DocBook 5 und mehr

z.B. reveal.js

=== Sie baden gerade ihre Hände drin

image::palmolive.jpg[background, size=cover]

=== Tools

DocGist: Onlineeditor

Github Pages

RestDoc: REST Api Doku aus Tests

Plugins für diverse Editoren

[NOTE.speaker]
====
DocGis: editiert Gists, Dropbox Content und dergleichen

Plugins: Atom, IntelliJ und Visual Studio Code
====

=== Code Beispiele

....
= Dokument Titel

== Kapitel

=== Unterkapitel

**bold**

*italic*

http://blog.schauderhaft.de

http://blog.schauderhaft.de[Mein Blog]

* list element
....

=== Images

....
image::palmolive.jpg[background, size=cover]
....

=== Uml Diagrams
....
[plantuml, diagram-classes, png]
----
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock

BlockProcessor <|-- DiagramBlock
DiagramBlock <|-- DitaaBlock
DiagramBlock <|-- PlantUmlBlock
----
....

=== Uml Ergebnis
image::diagram-classes.png[background, size=contain]

[plantuml, diagram-classes, png]
----
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock

BlockProcessor <|-- DiagramBlock
DiagramBlock <|-- DitaaBlock
DiagramBlock <|-- PlantUmlBlock
----

=== Die offensichtliche Frage

[quote, Imaginary Author]
Das ist ja ganz nett, für kleine Diagramme, aber was ist mit meinem 500 Klassen Architekturdiagramm?

=== Die offensichtliche Antwort

[quote, Jens Schauder]
In ein Bild konvertieren, nach Bedarf skalieren, nach `/dev/null` verschieben und von dort aus einfügen.

=== Admonitions
....
NOTE: Dies ist eine Notiz
....
NOTE: Dies ist eine Notiz

=== Includes

....
\include::somefile.ad[]
....

Fügt den Inhalt einer Datei ein.

=== Source Code

....
[source,ruby]
----
require 'sinatra' \<1>

get '/hi' do \<2> \<3>
  "Hello World!"
end
----
<1> Library import
<2> URL mapping
<3> Response block
....

=== Source Code Result

[source,ruby]
----
require 'sinatra' <1>

get '/hi' do <2> <3>
  "Hello World!"
end
----
<1> Library import
<2> URL mapping
<3> Response block

=== Source Code via include

....
[source,groovy]
.Sample.groovy
----
\include::Sample.groovy[tags=helloMethod]
----
....

Fügt den Teil zwischen

....
// tag::helloMethod[]
....

und

....
// end::helloMethod[]
....

ein.

=== Variablen ersetzen
....
:sayMyName: Jens Schauder

{sayMyName}
....

:sayMyName: Jens Schauder

{sayMyName}

[NOTE.speaker]

Attribut!

=== Variable aus dem Buildscript

....
{conference}
....

{conference}

=== Conditional content
....
\ifdef::venue[{venue}]

\ifndef::venue[]
{conference}
\endif::venue[]
....

ifdef::venue[{venue}]

ifndef::venue[]
{conference}
endif::venue[]

[NOTE.speaker]
====
Abschnitte einfügen, wenn der Kunde das Modul gekauft hat.

Dinge nur für Releases aber nicht in Dokumentation für Nightly Builds.
====

== All together now!

=== Wir haben Asciidoc Quellen

=== Wir haben Includes

* Quellcode
* Bilder
* CSS
* Standard Content

=== Versionsverwaltet (in Git)

=== Wie bekommen wir jetzt ein ...

* PDF?
* HTML Dokument?
* Reveal.js Dokument?

== Wir brauchen ein Buildtool!

image::clear-lightbulb.jpeg[background, size=cover]

=== Gradle

=== Ich benutze Gradle, weil ..

* es ist flexibler
* weniger wortreich
* weil es einen netten Migrationspfad vom Customskript zum Plugin gibt.
* nur so.

Geht alles bestimmt auch mit Maven

=== Der Plan

1. compile and test your code

2. Resourcen einsammeln (CSS, JS-Bibliotheken ...)

3. run asciidoctor to produce the outputs you want

== Talking about outputs

What the heck ist this reveal.js this guy is talking about

html5 js thingy that makes presentations.

Nice, but lots of html.

Not my core competency

I create it from asciidoc

Way less noise in my document

One stylesheet for my presentations => nice consistent look

includes for standard stuff => speaker slide and begin and end

Variables for stuff that appears multiple times

styles (css speak) or roles (asciidoc term) for styling options

e.g.

backdrop behind text in front of background images

== Quellen

clear-glass-light-bulb https://www.pexels.com/photo/clear-glass-light-bulb-75427/

Was ist mit Tee Zitiert aus der Giotto Werbung

Mops By existentist - Flickr, CC BY 2.0, https://commons.wikimedia.org/w/index.php?curid=2960791